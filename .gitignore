<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Higher or Lower Population Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a1a2e;
            color: #e0e0e0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 1rem;
        }
        .game-container {
            background-color: #2e2a44;
            border-radius: 1.5rem;
            padding: 2rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1.5rem;
            width: 100%;
            max-width: 32rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
        }
        .card {
            background-color: #3b3058;
            border-radius: 1rem;
            padding: 1.5rem;
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
            transition: transform 0.3s ease-in-out;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .card img {
            width: 100%;
            max-width: 15rem;
            height: auto;
            border-radius: 0.5rem;
            border: 2px solid #5d5d81;
        }
        .flag-name {
            font-size: 1.5rem;
            font-weight: bold;
            color: #c9c1f2;
            text-align: center;
        }
        .population-text {
            font-size: 1.125rem;
            color: #a0a0c0;
            text-align: center;
        }
        .vs-text {
            font-size: 2rem;
            font-weight: bold;
            color: #7d7d9e;
        }
        .buttons-container {
            display: flex;
            gap: 1rem;
            width: 100%;
            justify-content: center;
        }
        .btn {
            background-color: #6a4c93;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 9999px;
            font-weight: bold;
            text-transform: uppercase;
            transition: background-color 0.3s ease, transform 0.1s ease;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            flex: 1;
            text-align: center;
        }
        .btn:hover {
            background-color: #7b5da6;
            transform: translateY(-2px);
        }
        .btn:active {
            transform: translateY(0);
        }
        .game-info {
            display: flex;
            justify-content: space-between;
            width: 100%;
            font-size: 1.25rem;
            font-weight: bold;
            color: #c9c1f2;
        }
        .result-message {
            font-size: 1.5rem;
            font-weight: bold;
            margin-top: 1rem;
            text-align: center;
        }
        .correct {
            color: #4ade80;
        }
        .incorrect {
            color: #ef4444;
        }
        .game-over-container {
            display: none;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
            text-align: center;
        }
        .game-over-title {
            font-size: 2.5rem;
            font-weight: bold;
            color: #fca5a5;
        }
        .final-score {
            font-size: 1.5rem;
            color: #fca5a5;
        }
        .restart-btn {
            background-color: #6a4c93;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 9999px;
            font-weight: bold;
            text-transform: uppercase;
            transition: background-color 0.3s ease;
            cursor: pointer;
        }
        .restart-btn:hover {
            background-color: #7b5da6;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-100 flex items-center justify-center min-h-screen">
    <div id="game-container" class="game-container">
        <h1 class="text-3xl font-bold text-center text-purple-300">Higher or Lower Population</h1>
        <div class="game-info">
            <span id="score-display">Score: 0</span>
            <span id="streak-display">Streak: 0</span>
            <span id="lives-display">Lives: 3</span>
        </div>

        <div id="cards-container" class="w-full flex flex-col items-center gap-4 md:flex-row md:justify-center">
            <div id="card-one" class="card">
                <p id="flag-name-one" class="flag-name">Country One</p>
                <img id="flag-one" src="" alt="Country Flag">
                <p id="population-one" class="population-text">Population: Calculating...</p>
            </div>
            
            <p class="vs-text">VS</p>

            <div id="card-two" class="card">
                <p id="flag-name-two" class="flag-name">Country Two</p>
                <img id="flag-two" src="" alt="Country Flag">
                <p class="population-text">Higher or Lower?</p>
            </div>
        </div>

        <div id="buttons-container" class="buttons-container">
            <button id="higher-btn" class="btn">Higher</button>
            <button id="lower-btn" class="btn">Lower</button>
        </div>
        
        <p id="message" class="result-message"></p>

        <div id="game-over-screen" class="game-over-container hidden">
            <h2 class="game-over-title">Game Over!</h2>
            <p id="final-score" class="final-score"></p>
            <button id="restart-btn" class="restart-btn">Play Again</button>
        </div>
    </div>

    <script>
        // Array of countries with population data and flag URLs
        // Source: World Bank data, 2021-2023 estimates
        const countries = [
            { name: "China", population: 1425671352, flag: "https://flagcdn.com/cn.svg" },
            { name: "India", population: 1417173173, flag: "https://flagcdn.com/in.svg" },
            { name: "United States", population: 333287557, flag: "https://flagcdn.com/us.svg" },
            { name: "Indonesia", population: 275501339, flag: "https://flagcdn.com/id.svg" },
            { name: "Pakistan", population: 235824862, flag: "https://flagcdn.com/pk.svg" },
            { name: "Nigeria", population: 218541212, flag: "https://flagcdn.com/ng.svg" },
            { name: "Brazil", population: 215313498, flag: "https://flagcdn.com/br.svg" },
            { name: "Bangladesh", population: 171186372, flag: "https://flagcdn.com/bd.svg" },
            { name: "Russia", population: 144713300, flag: "https://flagcdn.com/ru.svg" },
            { name: "Mexico", population: 127504125, flag: "https://flagcdn.com/mx.svg" },
            { name: "Japan", population: 123951692, flag: "https://flagcdn.com/jp.svg" },
            { name: "Ethiopia", population: 123379924, flag: "https://flagcdn.com/et.svg" },
            { name: "Philippines", population: 115559009, flag: "https://flagcdn.com/ph.svg" },
            { name: "Egypt", population: 110990103, flag: "https://flagcdn.com/eg.svg" },
            { name: "Vietnam", population: 98186856, flag: "https://flagcdn.com/vn.svg" },
            { name: "DR Congo", population: 99010212, flag: "https://flagcdn.com/cd.svg" },
            { name: "Turkey", population: 85341241, flag: "https://flagcdn.com/tr.svg" },
            { name: "Germany", population: 83294633, flag: "https://flagcdn.com/de.svg" },
            { name: "Thailand", population: 71790442, flag: "https://flagcdn.com/th.svg" },
            { name: "France", population: 64626628, flag: "https://flagcdn.com/fr.svg" },
            { name: "United Kingdom", population: 67026292, flag: "https://flagcdn.com/gb.svg" },
            { name: "Italy", population: 58870762, flag: "https://flagcdn.com/it.svg" },
            { name: "South Africa", population: 59392255, flag: "https://flagcdn.com/za.svg" },
            { name: "Spain", population: 47551000, flag: "https://flagcdn.com/es.svg" },
            { name: "Canada", population: 38246108, flag: "https://flagcdn.com/ca.svg" },
            { name: "Australia", population: 26068792, flag: "https://flagcdn.com/au.svg" },
            { name: "Sweden", population: 10452326, flag: "https://flagcdn.com/se.svg" },
            { name: "Finland", population: 5540720, flag: "https://flagcdn.com/fi.svg" },
            { name: "Norway", population: 5491866, flag: "https://flagcdn.com/no.svg" },
            { name: "Denmark", population: 5882260, flag: "https://flagcdn.com/dk.svg" },
            { name: "New Zealand", population: 5122600, flag: "https://flagcdn.com/nz.svg" },
            { name: "Ireland", population: 5011500, flag: "https://flagcdn.com/ie.svg" },
            { name: "Iceland", population: 376000, flag: "https://flagcdn.com/is.svg" },
            { name: "Malta", population: 535064, flag: "https://flagcdn.com/mt.svg" },
            { name: "Monaco", population: 36469, flag: "https://flagcdn.com/mc.svg" },
            { name: "Vatican City", population: 825, flag: "https://flagcdn.com/va.svg" }
        ];

        let score = 0;
        let lives = 3;
        let streak = 0;
        let countryOne, countryTwo;
        let gameOver = false;

        const scoreDisplay = document.getElementById('score-display');
        const streakDisplay = document.getElementById('streak-display');
        const livesDisplay = document.getElementById('lives-display');
        const flagOneImg = document.getElementById('flag-one');
        const flagTwoImg = document.getElementById('flag-two');
        const flagNameOne = document.getElementById('flag-name-one');
        const flagNameTwo = document.getElementById('flag-name-two');
        const populationOne = document.getElementById('population-one');
        const higherBtn = document.getElementById('higher-btn');
        const lowerBtn = document.getElementById('lower-btn');
        const messageDisplay = document.getElementById('message');
        const gameOverScreen = document.getElementById('game-over-screen');
        const finalScoreDisplay = document.getElementById('final-score');
        const restartBtn = document.getElementById('restart-btn');
        const cardsContainer = document.getElementById('cards-container');
        const buttonsContainer = document.getElementById('buttons-container');

        // Function to format population numbers with commas
        const formatPopulation = (num) => {
            return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        };

        // Function to get a random country from the list
        const getRandomCountry = () => {
            return countries[Math.floor(Math.random() * countries.length)];
        };

        // Function to start a new round
        const newRound = () => {
            if (gameOver) return;

            // Shift countries
            countryOne = countryTwo || getRandomCountry();
            countryTwo = getRandomCountry();
            while (countryTwo.name === countryOne.name) {
                countryTwo = getRandomCountry();
            }

            // Update UI for card one
            flagOneImg.src = countryOne.flag;
            flagOneImg.alt = `${countryOne.name} flag`;
            flagNameOne.textContent = countryOne.name;
            populationOne.textContent = `Population: ${formatPopulation(countryOne.population)}`;

            // Update UI for card two
            flagTwoImg.src = countryTwo.flag;
            flagTwoImg.alt = `${countryTwo.name} flag`;
            flagNameTwo.textContent = countryTwo.name;

            // Update streak display
            streakDisplay.textContent = `Streak: ${streak}`;

            // Clear result message
            messageDisplay.textContent = '';
            messageDisplay.className = 'result-message';
        };

        // Function to check the user's guess
        const checkGuess = (guess) => {
            if (gameOver) return;
            const isHigher = countryTwo.population > countryOne.population;
            const isCorrect = (guess === 'higher' && isHigher) || (guess === 'lower' && !isHigher);

            if (isCorrect) {
                score++;
                streak++;
                let bonusMessage = '';
                if (streak > 0 && streak % 5 === 0) {
                    // Award bonus points for every 5 consecutive correct answers
                    score += 5;
                    bonusMessage = ` (+5 Bonus!)`;
                }
                messageDisplay.textContent = `Correct! ${countryTwo.name} has a population of ${formatPopulation(countryTwo.population)}.${bonusMessage}`;
                messageDisplay.classList.add('correct');
            } else {
                lives--;
                streak = 0; // Reset streak on incorrect answer
                messageDisplay.textContent = `Wrong! ${countryTwo.name} has a population of ${formatPopulation(countryTwo.population)}.`;
                messageDisplay.classList.add('incorrect');
            }
            scoreDisplay.textContent = `Score: ${score}`;
            livesDisplay.textContent = `Lives: ${lives}`;
            streakDisplay.textContent = `Streak: ${streak}`;

            // Check for game over
            if (lives <= 0) {
                endGame();
            } else {
                // Wait a moment before starting the next round
                setTimeout(newRound, 2000);
            }
        };

        // Function to end the game
        const endGame = () => {
            gameOver = true;
            cardsContainer.classList.add('hidden');
            buttonsContainer.classList.add('hidden');
            gameOverScreen.classList.remove('hidden');
            finalScoreDisplay.textContent = `Final Score: ${score}`;
        };

        // Function to restart the game
        const restartGame = () => {
            score = 0;
            lives = 3;
            streak = 0;
            gameOver = false;
            scoreDisplay.textContent = `Score: ${score}`;
            livesDisplay.textContent = `Lives: ${lives}`;
            streakDisplay.textContent = `Streak: ${streak}`;
            messageDisplay.textContent = '';
            gameOverScreen.classList.add('hidden');
            cardsContainer.classList.remove('hidden');
            buttonsContainer.classList.remove('hidden');
            newRound();
        };

        // Event listeners for buttons
        higherBtn.addEventListener('click', () => checkGuess('higher'));
        lowerBtn.addEventListener('click', () => checkGuess('lower'));
        restartBtn.addEventListener('click', restartGame);

        // Initial setup
        window.onload = newRound;

    </script>
</body>
</html>
